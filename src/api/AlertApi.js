/**
 * Alertmanager API
 * API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GettableAlert from '../model/GettableAlert';
import PostableAlert from '../model/PostableAlert';

/**
* Alert service.
* @module api/AlertApi
* @version 0.0.1
*/
export default class AlertApi {

    /**
    * Constructs a new AlertApi. 
    * @alias module:api/AlertApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAlerts operation.
     * @callback module:api/AlertApi~getAlertsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GettableAlert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of alerts
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active Show active alerts (default to true)
     * @param {Boolean} opts.silenced Show silenced alerts (default to true)
     * @param {Boolean} opts.inhibited Show inhibited alerts (default to true)
     * @param {Boolean} opts.unprocessed Show unprocessed alerts (default to true)
     * @param {Array.<String>} opts.filter A list of matchers to filter alerts by
     * @param {String} opts.receiver A regex matching receivers to filter alerts by
     * @param {module:api/AlertApi~getAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GettableAlert>}
     */
    getAlerts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'silenced': opts['silenced'],
        'inhibited': opts['inhibited'],
        'unprocessed': opts['unprocessed'],
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'receiver': opts['receiver']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GettableAlert];
      return this.apiClient.callApi(
        '/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAlerts operation.
     * @callback module:api/AlertApi~postAlertsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Alerts
     * @param {Array.<module:model/PostableAlert>} alerts The alerts to create
     * @param {module:api/AlertApi~postAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAlerts(alerts, callback) {
      let postBody = alerts;
      // verify the required parameter 'alerts' is set
      if (alerts === undefined || alerts === null) {
        throw new Error("Missing the required parameter 'alerts' when calling postAlerts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
