/**
 * Alertmanager API
 * API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GettableSilence from '../model/GettableSilence';
import InlineResponse200 from '../model/InlineResponse200';
import PostableSilence from '../model/PostableSilence';

/**
* Silence service.
* @module api/SilenceApi
* @version 0.0.1
*/
export default class SilenceApi {

    /**
    * Constructs a new SilenceApi. 
    * @alias module:api/SilenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSilence operation.
     * @callback module:api/SilenceApi~deleteSilenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a silence by its ID
     * @param {String} silenceID ID of the silence to get
     * @param {module:api/SilenceApi~deleteSilenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSilence(silenceID, callback) {
      let postBody = null;
      // verify the required parameter 'silenceID' is set
      if (silenceID === undefined || silenceID === null) {
        throw new Error("Missing the required parameter 'silenceID' when calling deleteSilence");
      }

      let pathParams = {
        'silenceID': silenceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/silence/{silenceID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSilence operation.
     * @callback module:api/SilenceApi~getSilenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GettableSilence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a silence by its ID
     * @param {String} silenceID ID of the silence to get
     * @param {module:api/SilenceApi~getSilenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GettableSilence}
     */
    getSilence(silenceID, callback) {
      let postBody = null;
      // verify the required parameter 'silenceID' is set
      if (silenceID === undefined || silenceID === null) {
        throw new Error("Missing the required parameter 'silenceID' when calling getSilence");
      }

      let pathParams = {
        'silenceID': silenceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GettableSilence;
      return this.apiClient.callApi(
        '/silence/{silenceID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSilences operation.
     * @callback module:api/SilenceApi~getSilencesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GettableSilence>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of silences
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.filter A list of matchers to filter silences by
     * @param {module:api/SilenceApi~getSilencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GettableSilence>}
     */
    getSilences(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GettableSilence];
      return this.apiClient.callApi(
        '/silences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSilences operation.
     * @callback module:api/SilenceApi~postSilencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a new silence or update an existing one
     * @param {module:model/PostableSilence} silence The silence to create
     * @param {module:api/SilenceApi~postSilencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    postSilences(silence, callback) {
      let postBody = silence;
      // verify the required parameter 'silence' is set
      if (silence === undefined || silence === null) {
        throw new Error("Missing the required parameter 'silence' when calling postSilences");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/silences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
